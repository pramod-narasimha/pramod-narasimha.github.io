{"version":3,"sources":["actions/FetchApiDataActions.js","Components/Banking/BankDetailComponent.js","Components/StaticPages/NotFound.js","Components/Banking/CommonComponents/BankTableComponent/BankTable.js","Components/Banking/BankListComponent.js","Components/StaticPages/HomePage.js","Components/Layouts/LayoutComponent.js","routes/PublicRoutes.js","reducers/FetchApiDataReducer.js","reducers/rootReducer.js","stores/store.js","App.js","serviceWorker.js","index.js"],"names":["api","setApiData","data","type","payload","setLoading","setCityList","setFavouriteList","setFilteredDataArray","setSearchKeyData","fetchApiData","dispatch","bankListData","localStorage","getItem","JSON","parse","responseCopy","Set","map","city","filter","stringData","isFavourite","key","numberData","axios","get","then","response","console","log","forEach","setItem","stringify","setFavourite","id","bankList","connect","statef","isLoading","apiData","favList","clearSearch","props","history","useHistory","match1","useRouteMatch","match2","match","params","name","React","useEffect","title","style","paddingRight","display","ArrowLeftOutlined","onClick","goBack","bordered","width","Item","label","StarFilled","color","StarOutlined","span","bank_name","ifsc","branch","bank_id","address","Notfound","justify","status","subTitle","extra","to","BankTable","loading","rowSelection","tableData","location","useLocation","columns","dataIndex","render","row","push","pathname","dataSource","pagination","showSizeChanger","Option","Select","PostComponent","state","timerId","onSelectChange","selectedRowKeys","length","includes","setState","onFieldSearch","value","clearTimeout","setTimeout","setSearchKey","displayData","isOnlyFavourites","searchKey","filteredData","this","hideDefaultSelections","onChange","marginBottom","justifyContent","showSearch","placeholder","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","cityList","Search","e","target","size","Component","bank","toUpperCase","toString","HomePage","icon","SmileOutlined","Header","Layout","Sider","Content","LayoutComponent","path","useState","isCollapsed","setIsCollapsed","trigger","collapsible","collapsed","className","theme","mode","defaultSelectedKeys","selectedKeys","HomeFilled","BankFilled","padding","createElement","MenuUnfoldOutlined","MenuFoldOutlined","margin","exact","BankListComponent","PublicRoutes","defaultState","postsList","postDataList","FetchApiDataReducer","action","updateState","update","Object","assign","resetState","rootReducer","combineReducers","defaults","withCredentials","middleware","applyMiddleware","thunk","withExtraArgument","store","createStore","composeWithDevTools","App","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+bACMA,EAEK,sDAGJ,SAASC,EAAWC,GACzB,MAAO,CACLC,KAAM,eACNC,QAASF,GAWN,SAASG,EAAWH,GACzB,MAAO,CACLC,KAAM,aACNC,QAASF,GAIN,SAASI,EAAYJ,GAC1B,MAAO,CACLC,KAAM,gBACNC,QAASF,GAIN,SAASK,EAAiBL,GAC/B,MAAO,CACLC,KAAM,qBACNC,QAASF,GAIN,SAASM,EAAqBN,GACnC,MAAO,CACLC,KAAM,oBACNC,QAASF,GAGN,SAASO,EAAiBP,GAC/B,MAAO,CACLC,KAAM,iBACNC,QAASF,GAIN,IAAMQ,EAAe,SAAAR,GAAI,OAAI,SAAAS,GAClCA,EAASN,GAAW,IACpB,IAAMO,EAC4C,qBAAzCC,aAAaC,QAAQ,gBACxB,KACAC,KAAKC,MAAMH,aAAaC,QAAQ,iBAClCG,EAAe,GACdL,GAwBHD,EACEL,EAAY,YACP,IAAIY,IACLN,EACGO,KAAI,SAAAjB,GACH,OAAOA,EAAKkB,QAEbC,QAAO,SAAAC,GAAU,QAAMA,SAIhCX,EACEJ,EACEK,EACGO,KAAI,SAAAjB,GACH,OAAIA,EAAKqB,YACArB,EAAKsB,IAEL,MAGVH,QAAO,SAAAI,GAAU,MAA0B,kBAAfA,OAGnCd,EAASV,EAAWW,IACpBD,EAASN,GAAW,KAhDpBqB,IAAMC,IAAI3B,EAAaE,GAAM0B,MAAK,SAAAC,GAChCZ,EAAY,YAAOY,EAAS3B,MAC5B4B,QAAQC,IAAI,gBAAiBd,GAC7BA,EAAae,SAAQ,SAAC9B,EAAMsB,GAC1BtB,EAAKsB,IAAMA,EACXtB,EAAKqB,aAAc,KAErBZ,EACEL,EAAY,YACP,IAAIY,IACLD,EACGE,KAAI,SAAAjB,GACH,OAAOA,EAAKkB,QAEbC,QAAO,SAAAC,GAAU,QAAMA,SAIhCT,aAAaoB,QAAQ,eAAgBlB,KAAKmB,UAAUjB,IACpDN,EAASV,EAAWgB,IACpBN,EAASN,GAAW,SAgCb8B,EAAe,SAACC,EAAIC,EAAUlC,GAAf,OAAwB,SAAAQ,GAClD0B,EAASD,GAAIb,YAAcpB,EAC3BQ,EACEJ,EACE8B,EACGlB,KAAI,SAAAjB,GACH,OAAIA,EAAKqB,YACArB,EAAKsB,IAEL,MAGVH,QAAO,SAAAI,GAAU,MAA0B,kBAAfA,OAGnCd,EAASV,EAAWoC,IACpBxB,aAAaoB,QAAQ,eAAgBlB,KAAKmB,UAAUG,MCjCvCC,eAfS,SAAAC,GACtB,MAAO,CACLC,UAAWD,EAAOE,QAAQD,UAC1BE,QAASH,EAAOE,QAAQC,QACxBL,SAAUE,EAAOE,QAAQJ,aAIF,SAAA1B,GAAQ,MAAK,CACtCD,aAAc,kBAAMC,EAASD,MAC7ByB,aAAc,SAACC,EAAIC,EAAUlC,GAAf,OACZQ,EAASwB,EAAaC,EAAIC,EAAUlC,KACtCwC,YAAa,kBAAMhC,GD0DY,SAAAA,GAC/BA,EAASH,EAAqB,KAC9BG,EAASF,EAAiB,YCzDb6B,EAtFa,SAAAM,GAAU,IAAD,0BAC/BC,EAAUC,cACRC,EAASC,YAAc,gBACvBC,EAASD,YAAc,oBACvBE,GAAc,OAANH,QAAM,IAANA,OAAA,EAAAA,EAAQI,OAAOC,QAAf,OAAuBH,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAQE,OAAOC,MAMpD,OAJAC,IAAMC,WAAU,WACdV,EAAMlC,eACNkC,EAAMD,gBACL,IAED,kBAAC,IAAD,CACEY,MACE,oCACE,yBAAKC,MAAO,CAAEC,aAAc,OAAQC,QAAS,WAC3C,kBAACC,EAAA,EAAD,CAAmBC,QAAS,kBAAMf,EAAQgB,aAG5C,+CAGJC,UAAU,EACVN,MAAO,CAAEO,MAAO,SAEhB,kBAAC,IAAD,KACE,kBAAC,IAAaC,KAAd,CACEC,MACE,qCACG,UAAArB,EAAMP,gBAAN,eAAiBa,KAChB,yBAAKM,MAAO,CAAEC,aAAc,OAAQC,QAAS,YAC1C,UAAAd,EAAMP,gBAAN,yBAAiBa,UAAjB,eAAyB3B,aACxB,kBAAC2C,EAAA,EAAD,CACEN,QAAS,kBACPhB,EAAMT,aAAae,EAAON,EAAMP,UAAU,IAE5CmB,MAAO,CAAEW,MAAO,aAGlB,kBAACC,EAAA,EAAD,CACER,QAAS,kBACPhB,EAAMT,aAAae,EAAON,EAAMP,UAAU,IAE5CmB,MAAO,CAAEW,MAAO,cAKxB,4CAGJE,KAAM,GAzBR,UA2BGzB,EAAMP,gBA3BT,uBA2BG,EAAiBa,UA3BpB,aA2BG,EAAyBoB,WAE5B,kBAAC,IAAaN,KAAd,CAAmBC,MAAM,OAAOI,KAAM,GAAtC,UACGzB,EAAMP,gBADT,uBACG,EAAiBa,UADpB,aACG,EAAyBqB,MAE5B,kBAAC,IAAaP,KAAd,CAAmBC,MAAM,SAASI,KAAM,GAAxC,UACGzB,EAAMP,gBADT,uBACG,EAAiBa,UADpB,aACG,EAAyBsB,QAE5B,kBAAC,IAAaR,KAAd,CAAmBC,MAAM,UAAUI,KAAM,GAAzC,UACGzB,EAAMP,gBADT,uBACG,EAAiBa,UADpB,aACG,EAAyBuB,SAE5B,kBAAC,IAAaT,KAAd,CAAmBC,MAAM,UAAUI,KAAM,GAAzC,UACGzB,EAAMP,gBADT,uBACG,EAAiBa,UADpB,aACG,EAAyBwB,c,yBCrDrBC,EAlBE,SAAA/B,GACf,OACE,kBAAC,IAAD,CAAKgC,QAAS,UACZ,kBAAC,IAAD,CACEC,OAAO,MACPtB,MAAM,MACNuB,SAAS,8CACTC,MACE,kBAAC,IAAD,CAAMC,GAAG,KACP,kBAAC,IAAD,CAAQ7E,KAAK,WAAb,iBAPR,M,gFCiFW8E,EAlFG,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACpCvC,EAAUC,cACVuC,EAAWC,cACXC,EAAU,CACd,CACEhC,MAAO,YACPiC,UAAW,YACXC,OAAQ,SAACnB,EAAWoB,GAAZ,OACN,0BACE9B,QAAS,WACPf,EAAQ8C,KAAR,UAAgBN,EAASO,SAAzB,YAAqCF,EAAIlE,QAG1C8C,KAIP,CACEf,MAAO,OACPiC,UAAW,OACXC,OAAQ,SAAClB,EAAMmB,GAAP,OACN,0BACE9B,QAAS,WACPf,EAAQ8C,KAAR,UAAgBN,EAASO,SAAzB,YAAqCF,EAAIlE,QAG1C+C,KAIP,CACEhB,MAAO,SACPiC,UAAW,SACXC,OAAQ,SAACjB,EAAQkB,GAAT,OACN,0BACE9B,QAAS,WACPf,EAAQ8C,KAAR,UAAgBN,EAASO,SAAzB,YAAqCF,EAAIlE,QAG1CgD,KAIP,CACEjB,MAAO,UACPiC,UAAW,UACXC,OAAQ,SAAChB,EAASiB,GAAV,OACN,0BACE9B,QAAS,WACPf,EAAQ8C,KAAR,UAAgBN,EAASO,SAAzB,YAAqCF,EAAIlE,QAG1CiD,KAKP,CACElB,MAAO,UACPiC,UAAW,UACXC,OAAQ,SAACf,EAASgB,GAAV,OACN,0BACE9B,QAAS,WACPf,EAAQ8C,KAAR,UAAgBN,EAASO,SAAzB,YAAqCF,EAAIlE,QAG1CkD,MAKT,OACE,kBAAC,IAAD,CACEQ,QAASA,EACTC,aAAcA,EACdI,QAASA,EACTM,WAAYT,EACZU,WAAY,CAAEC,iBAAiB,MCzE7BC,EAAWC,IAAXD,OAEFE,E,2MACJC,MAAQ,CACNC,QAAS,G,EAOXC,eAAiB,SAAAC,GACfA,EAAgBnF,KAAI,SAAAK,GAIlB,MAHmB,kBAARA,GACT,EAAKoB,MAAMT,aAAaX,EAAK,EAAKoB,MAAMP,UAAU,GAE7C,QAEL,EAAKO,MAAMF,QAAQ6D,QACrB,EAAK3D,MAAMF,QAAQvB,KAAI,SAAAK,GAIrB,OAHK8E,EAAgBE,SAAShF,IAC5B,EAAKoB,MAAMT,aAAaX,EAAK,EAAKoB,MAAMP,UAAU,GAE7C,QAGX,EAAKoE,SAAS,CAAEH,qB,EAIlBI,cAAgB,SAAAC,GACdC,aAAa,EAAKT,MAAMC,SACxB,EAAKK,SAAS,CACZL,QAASS,YAAW,WAClB,EAAKjE,MAAMkE,aAAaH,EAAO,EAAK/D,MAAMP,YACzC,Q,EAIP0E,YAAc,WAE4B,IAAD,EAE9B,EAHT,OAAI,EAAKnE,MAAMoE,iBACT,EAAKpE,MAAMqE,UAAUV,OAAS,EAChC,UAAO,EAAK3D,MAAMsE,oBAAlB,aAAO,EAAyB7F,QAAO,SAAAnB,GAAI,OAAIA,EAAKqB,eAEpD,UAAO,EAAKqB,MAAMP,gBAAlB,aAAO,EAAqBhB,QAAO,SAAAnB,GAAI,OAAIA,EAAKqB,eAG9C,EAAKqB,MAAMqE,UAAUV,OAAS,EACzB,EAAK3D,MAAMsE,aAEX,EAAKtE,MAAMP,U,mFA1CtB8E,KAAKvE,MAAMlC,iB,+BA+CH,IAAD,OACDyE,EAAe,CACnBmB,gBAAiBa,KAAKvE,MAAMF,QAC5B0E,sBAAuB,OACvBC,SAAUF,KAAKd,gBAEjB,OACE,6BACE,yBAAK7C,MAAO,CAAE8D,aAAc,KAC1B,yBAAK9D,MAAO,CAAEE,QAAS,OAAQ6D,eAAgB,aAC7C,kBAAC,IAAD,CACEzD,UAAU,EACV0D,YAAU,EACVhE,MAAO,CAAEO,MAAO,KAChB0D,YAAY,cACZC,iBAAiB,WACjBC,aAAc,SAACC,EAAOC,GAAR,OACZA,EAAOC,SAASC,cAAcC,QAAQJ,EAAMG,gBAAkB,IAG/DZ,KAAKvE,MAAMqF,SAAS9G,KAAI,SAAAjB,GAAI,OAC3B,kBAAC8F,EAAD,CAAQxE,IAAKtB,EAAMyG,MAAOzG,GACvBA,OAIP,yBAAKsD,MAAO,CAAEO,MAAO,QACnB,kBAAC,IAAMmE,OAAP,CAAcb,SAAU,SAACc,GAAD,OAAO,EAAKzB,cAAcyB,EAAEC,OAAOzB,QAAQc,YAAY,oCAAoCY,KAAK,aAI9H,kBAAC,EAAD,CACEnD,QAASiC,KAAKvE,MAAMsC,QACpBE,UAAW+B,KAAKJ,cAChB5B,aAAcA,S,GAvFI9B,IAAMiF,WAiHnBhG,eAnBS,SAAAC,GACtB,MAAO,CACLC,UAAWD,EAAOE,QAAQD,UAC1BE,QAASH,EAAOE,QAAQC,QACxBL,SAAUE,EAAOE,QAAQJ,SACzB4F,SAAU1F,EAAOE,QAAQwF,SACzBhB,UAAW1E,EAAOE,QAAQwE,UAC1BC,aAAc3E,EAAOE,QAAQyE,iBAIN,SAAAvG,GAAQ,MAAK,CACtCD,aAAc,kBAAMC,EAASD,MAC7ByB,aAAc,SAACC,EAAIC,EAAUlC,GAAf,OACZQ,EAASwB,EAAaC,EAAIC,EAAUlC,KACtC2G,aAAc,SAACG,EAAWrG,GAAZ,OACZD,EJYwB,SAAfmG,EAAgBG,EAAWrG,GAAZ,OAA6B,SAAAD,GACvDmB,QAAQC,IAAI,iBAAkBkF,GAC9B,IAAMC,EAAetG,EAAaS,QAAO,SAAAkH,GACvC,SACEA,EAAKjE,UAAUkE,cAAchC,SAASS,EAAUuB,gBAChDD,EAAKhE,KAAKiE,cAAcA,cAAchC,SAASS,EAAUuB,gBACzDD,EAAK/D,OAAOgE,cAAchC,SAASS,EAAUuB,gBAC7CD,EAAK9D,QAAQgE,WAAWD,cAAchC,SAASS,EAAUuB,gBACzDD,EAAK7D,QAAQ8D,cAAchC,SAASS,EAAUuB,mBAOlD7H,EAASF,EAAiBqG,IAC1BnG,EAASH,EAAqB0G,KI5BnBJ,CAAaG,EAAWrG,QAGtB0B,CAA6C4D,G,SCvG7CwC,EAjBE,SAAA9F,GACf,OACE,kBAAC,IAAD,CAAKgC,QAAS,UACZ,kBAAC,IAAD,CACE+D,KAAM,kBAACC,EAAA,EAAD,MACNrF,MAAM,0CACNwB,MACE,kBAAC,IAAD,CAAMC,GAAG,UACP,kBAAC,IAAD,CAAQ7E,KAAK,WAAb,4BANR,MCWI0I,EAA2BC,IAA3BD,OAAQE,GAAmBD,IAAnBC,MAAOC,GAAYF,IAAZE,QA+ERC,GA7ES,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnBrG,EAAUC,cADoB,EAEEO,IAAM8F,UAAS,GAFjB,mBAE7BC,EAF6B,KAEhBC,EAFgB,KAQpC,OACE,kBAAC,IAAD,KACE,kBAACN,GAAD,CAAOO,QAAS,KAAMC,aAAW,EAACC,UAAWJ,GAC3C,yBAAKK,UAAU,SACf,kBAAC,IAAD,CACEC,MAAM,OACNC,KAAK,SACLC,oBAAqB,CAAC,QACtBC,aAAc,CAACX,IAEf,kBAAC,IAAKlF,KAAN,CAAWxC,IAAI,OAAOoC,QAAS,kBAAMf,EAAQ8C,KAAR,OACnC,kBAACmE,EAAA,EAAD,MACA,uCAEF,kBAAC,IAAK9F,KAAN,CAAWxC,IAAI,QAAQoC,QAAS,kBAAMf,EAAQ8C,KAAR,YACpC,kBAACoE,EAAA,EAAD,MACA,wCAEF,kBAAC,IAAK/F,KAAN,CAAWxC,IAAI,YAAYoC,QAAS,kBAAMf,EAAQ8C,KAAR,gBACxC,kBAACzB,EAAA,EAAD,MACA,8CAIN,kBAAC,IAAD,CAAQuF,UAAU,eAChB,kBAACZ,EAAD,CAAQY,UAAU,yBAAyBjG,MAAO,CAAEwG,QAAS,IAC3D,yBAAKP,UAAU,kBACZpG,IAAM4G,cACLb,EAAcc,IAAqBC,IACnC,CACEV,UAAW,UACX7F,QAnCC,WACbyF,GAAgBD,MAqCR,yBAAKK,UAAU,wBAGnB,kBAACT,GAAD,CACES,UAAU,yBACVjG,MAAO,CACL4G,OAAQ,YACRJ,QAAS,KAGX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,OAAK,EAACnB,KAAM,CAAC,IAAK,UACvB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOmB,OAAK,EAACnB,KAAM,CAAC,qBAAsB,mBACxC,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOmB,OAAK,EAACnB,KAAM,UACjB,kBAACoB,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACnB,KAAM,cACjB,kBAACoB,EAAD,CAAmBtD,kBAAgB,KAErC,kBAAC,IAAD,KACE,kBAAC,EAAD,YChECuD,GAjBM,kBACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOF,OAAK,EAACnB,KAAM,CAAC,IAAK,UACvB,kBAAC,GAAD,CAAiBA,KAAM,UAEzB,kBAAC,IAAD,CAAOmB,OAAK,EAACnB,KAAM,UACjB,kBAAC,GAAD,CAAiBA,KAAM,WAEzB,kBAAC,IAAD,CAAOmB,OAAK,EAACnB,KAAM,cACjB,kBAAC,GAAD,CAAiBA,KAAM,eAEzB,kBAAC,IAAD,KACE,kBAAC,GAAD,S,6BChBAsB,GAAe,CACnBhI,WAAW,EACXH,SAAU,GACVK,QAAS,GACT+H,UAAW,GACXC,aAAc,GACdzD,UAAW,GACXC,aAAc,GACde,SAAU,IAkCG0C,GA/Ba,WAAwC,IAA/BxE,EAA8B,uDAAtBqE,GAAcI,EAAQ,uCACzDzK,EAAkByK,EAAlBzK,KAAMC,EAAYwK,EAAZxK,QAERyK,EAAc,SAAAC,GAClB,OAAOC,OAAOC,OAAO,GAAI7E,EAAO2E,IAG5BG,EAAa,WACjB,OAAOF,OAAOC,OAAO,GAAI7E,EAAOqE,KAElC,OAAQrK,GACN,IAAK,aACH,OAAO0K,EAAY,CAAErI,UAAWpC,IAClC,IAAK,eACH,OAAOyK,EAAY,CAAExI,SAAUjC,IACjC,IAAK,qBACH,OAAOyK,EAAY,CAAEnI,QAAStC,IAChC,IAAK,oBACH,OAAOyK,EAAY,CAAEH,aAActK,IACrC,IAAK,gBACH,OAAOyK,EAAY,CAAE5C,SAAU7H,IACjC,IAAK,oBACH,OAAOyK,EAAY,CAAE3D,aAAc9G,IACrC,IAAK,iBACH,OAAOyK,EAAY,CAAE5D,UAAW7G,IAClC,IAAK,aACH,OAAO6K,IACT,QACE,OAAO9E,IChCE+E,GAJKC,2BAAgB,CAClC1I,QAASkI,KCEXjJ,IAAM0J,SAASC,iBAAkB,EACjC,IAAMC,GAAaC,2BAAgBC,KAAMC,kBAAkB/J,MAK5CgK,GAFDC,uBAAYT,GAAaU,+BAAoBN,KCO5CO,OAVf,WACE,OACE,kBAAC,IAAD,CAAUH,MAAOA,IACf,kBAAC,IAAD,KACE,kBAAC,GAAD,SCCYI,QACW,cAA7BC,OAAO1G,SAAS2G,UAEe,UAA7BD,OAAO1G,SAAS2G,UAEhBD,OAAO1G,SAAS2G,SAAS9I,MACvB,2DCXN+I,IAASxG,OAAO,kBAAC,GAAD,MAASyG,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1K,MAAK,SAAA2K,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5K,QAAQ4K,MAAMA,EAAMC,c","file":"static/js/main.4e18eede.chunk.js","sourcesContent":["import axios from \"axios\";\nconst api = {\n  devApi: \"http://localhost:3000/apiResponse.json\",\n  prodApi: \"https://pramod-narasimha.github.io/apiResponse.json\"\n};\n\nexport function setApiData(data) {\n  return {\n    type: \"SET_API_DATA\",\n    payload: data\n  };\n}\n\nexport function setPostApiData(data) {\n  return {\n    type: \"SET_POST_API_DATA\",\n    payload: data\n  };\n}\n\nexport function setLoading(data) {\n  return {\n    type: \"IS_LOADING\",\n    payload: data\n  };\n}\n\nexport function setCityList(data) {\n  return {\n    type: \"SET_CITY_LIST\",\n    payload: data\n  };\n}\n\nexport function setFavouriteList(data) {\n  return {\n    type: \"SET_FAVOURITE_LIST\",\n    payload: data\n  };\n}\n\nexport function setFilteredDataArray(data) {\n  return {\n    type: \"SET_FILTERED_LIST\",\n    payload: data\n  };\n}\nexport function setSearchKeyData(data) {\n  return {\n    type: \"SET_SEARCH_KEY\",\n    payload: data\n  };\n}\n\nexport const fetchApiData = data => dispatch => {\n  dispatch(setLoading(true));\n  const bankListData =\n    typeof localStorage.getItem(\"bankListData\") === \"undefined\"\n      ? null\n      : JSON.parse(localStorage.getItem(\"bankListData\"));\n  let responseCopy = [];\n  if (!bankListData) {\n    axios.get(api.prodApi, data).then(response => {\n      responseCopy = [...response.data];\n      console.log(\"response copy\", responseCopy);\n      responseCopy.forEach((data, key) => {\n        data.key = key;\n        data.isFavourite = false;\n      });\n      dispatch(\n        setCityList([\n          ...new Set(\n            responseCopy\n              .map(data => {\n                return data.city;\n              })\n              .filter(stringData => !!stringData)\n          )\n        ])\n      );\n      localStorage.setItem(\"bankListData\", JSON.stringify(responseCopy));\n      dispatch(setApiData(responseCopy));\n      dispatch(setLoading(false));\n    });\n  } else {\n    dispatch(\n      setCityList([\n        ...new Set(\n          bankListData\n            .map(data => {\n              return data.city;\n            })\n            .filter(stringData => !!stringData)\n        )\n      ])\n    );\n    dispatch(\n      setFavouriteList(\n        bankListData\n          .map(data => {\n            if (data.isFavourite) {\n              return data.key;\n            } else {\n              return \"\";\n            }\n          })\n          .filter(numberData => typeof numberData === \"number\")\n      )\n    );\n    dispatch(setApiData(bankListData));\n    dispatch(setLoading(false));\n  }\n};\n\nexport const setFavourite = (id, bankList, type) => dispatch => {\n  bankList[id].isFavourite = type;\n  dispatch(\n    setFavouriteList(\n      bankList\n        .map(data => {\n          if (data.isFavourite) {\n            return data.key;\n          } else {\n            return \"\";\n          }\n        })\n        .filter(numberData => typeof numberData === \"number\")\n    )\n  );\n  dispatch(setApiData(bankList));\n  localStorage.setItem(\"bankListData\", JSON.stringify(bankList));\n};\n\nexport const setSearchKey = (searchKey, bankListData) => dispatch => {\n  console.log(\"search key => \", searchKey)\n  const filteredData = bankListData.filter(bank => {\n    if (\n      bank.bank_name.toUpperCase().includes(searchKey.toUpperCase()) ||\n      bank.ifsc.toUpperCase().toUpperCase().includes(searchKey.toUpperCase()) ||\n      bank.branch.toUpperCase().includes(searchKey.toUpperCase()) ||\n      bank.bank_id.toString().toUpperCase().includes(searchKey.toUpperCase()) ||\n      bank.address.toUpperCase().includes(searchKey.toUpperCase())\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  dispatch(setSearchKeyData(setSearchKey));\n  dispatch(setFilteredDataArray(filteredData));\n};\n\nexport const clearSearch = () => dispatch => {\n  dispatch(setFilteredDataArray([]));\n  dispatch(setSearchKeyData(\"\"));\n};\n","import React from \"react\";\nimport { Card, Descriptions } from \"antd\";\nimport { ArrowLeftOutlined, StarFilled, StarOutlined } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\nimport {\n  fetchApiData,\n  setFavourite,\n  clearSearch\n} from \"../../actions/FetchApiDataActions\";\n\nconst BankDetailComponent = props => {\nconst history = useHistory();\n  const match1 = useRouteMatch(\"/banks/:name\");\n  const match2 = useRouteMatch(\"/favourite/:name\");\n  const match = match1?.params.name || match2?.params.name;\n\n  React.useEffect(() => {\n    props.fetchApiData();\n    props.clearSearch();\n  }, []);\n  return (\n    <Card\n      title={\n        <>\n          <div style={{ paddingRight: \"10px\", display: \"inline\" }}>\n            <ArrowLeftOutlined onClick={() => history.goBack()} />\n          </div>\n\n          <span>Bank Details</span>\n        </>\n      }\n      bordered={false}\n      style={{ width: \"100%\" }}\n    >\n      <Descriptions>\n        <Descriptions.Item\n          label={\n            <>\n              {props.bankList?.[match] && (\n                <div style={{ paddingRight: \"10px\", display: \"inline\" }}>\n                  {props.bankList?.[match]?.isFavourite ? (\n                    <StarFilled\n                      onClick={() =>\n                        props.setFavourite(match, props.bankList, false)\n                      }\n                      style={{ color: \"#FFB75D\" }}\n                    />\n                  ) : (\n                    <StarOutlined\n                      onClick={() =>\n                        props.setFavourite(match, props.bankList, true)\n                      }\n                      style={{ color: \"#FFB75D\" }}\n                    />\n                  )}\n                </div>\n              )}\n              <span>Bank Name</span>\n            </>\n          }\n          span={3}\n        >\n          {props.bankList?.[match]?.bank_name}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"IFSC\" span={3}>\n          {props.bankList?.[match]?.ifsc}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"Branch\" span={3}>\n          {props.bankList?.[match]?.branch}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"Bank ID\" span={3}>\n          {props.bankList?.[match]?.bank_id}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"Address\" span={3}>\n          {props.bankList?.[match]?.address}\n        </Descriptions.Item>\n      </Descriptions>\n    </Card>\n  );\n};\n\nconst mapStateToProps = statef => {\n  return {\n    isLoading: statef.apiData.isLoading,\n    favList: statef.apiData.favList,\n    bankList: statef.apiData.bankList\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchApiData: () => dispatch(fetchApiData()),\n  setFavourite: (id, bankList, type) =>\n    dispatch(setFavourite(id, bankList, type)),\n  clearSearch: () => dispatch(clearSearch())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BankDetailComponent);\n","import React from \"react\";\nimport { Row, Result, Button } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nconst Notfound = props => {\n  return (\n    <Row justify={\"center\"}>\n      <Result\n        status=\"404\"\n        title=\"404\"\n        subTitle=\"Sorry, the page you visited does not exist.\"\n        extra={\n          <Link to=\"/\">\n            <Button type=\"primary\">Go to home</Button>\n          </Link>\n        }\n      />\n      ,\n    </Row>\n  );\n};\n\nexport default Notfound;\n","import React from \"react\";\nimport \"./styles.css\";\nimport { Table } from \"antd\";\nimport { useHistory, useLocation } from \"react-router\";\n\nconst BankTable = ({ loading, rowSelection, tableData }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const columns = [\n    {\n      title: \"Bank Name\",\n      dataIndex: \"bank_name\",\n      render: (bank_name, row) => (\n        <span\n          onClick={() => {\n            history.push(`${location.pathname}/${row.key}`);\n          }}\n        >\n          {bank_name}\n        </span>\n      )\n    },\n    {\n      title: \"IFSC\",\n      dataIndex: \"ifsc\",\n      render: (ifsc, row) => (\n        <span\n          onClick={() => {\n            history.push(`${location.pathname}/${row.key}`);\n          }}\n        >\n          {ifsc}\n        </span>\n      )\n    },\n    {\n      title: \"Branch\",\n      dataIndex: \"branch\",\n      render: (branch, row) => (\n        <span\n          onClick={() => {\n            history.push(`${location.pathname}/${row.key}`);\n          }}\n        >\n          {branch}\n        </span>\n      )\n    },\n    {\n      title: \"Bank ID\",\n      dataIndex: \"bank_id\",\n      render: (bank_id, row) => (\n        <span\n          onClick={() => {\n            history.push(`${location.pathname}/${row.key}`);\n          }}\n        >\n          {bank_id}\n        </span>\n      )\n    },\n\n    {\n      title: \"Address\",\n      dataIndex: \"address\",\n      render: (address, row) => (\n        <span\n          onClick={() => {\n            history.push(`${location.pathname}/${row.key}`);\n          }}\n        >\n          {address}\n        </span>\n      )\n    }\n  ];\n  return (\n    <Table\n      loading={loading}\n      rowSelection={rowSelection}\n      columns={columns}\n      dataSource={tableData}\n      pagination={{ showSizeChanger: true }}\n    />\n  );\n};\n\nexport default BankTable;\n","import React from \"react\";\nimport { Select, Input } from \"antd\";\nimport { connect } from \"react-redux\";\nimport {\n  fetchApiData,\n  setFavourite,\n  setSearchKey\n} from \"../../actions/FetchApiDataActions\";\nimport BankTable from \"./CommonComponents/BankTableComponent/BankTable\";\nconst { Option } = Select;\n\nclass PostComponent extends React.Component {\n  state = {\n    timerId: 0\n  };\n\n  componentDidMount() {\n    this.props.fetchApiData();\n  }\n\n  onSelectChange = selectedRowKeys => {\n    selectedRowKeys.map(key => {\n      if (typeof key === \"number\") {\n        this.props.setFavourite(key, this.props.bankList, true);\n      }\n      return null;\n    });\n    if (this.props.favList.length) {\n      this.props.favList.map(key => {\n        if (!selectedRowKeys.includes(key)) {\n          this.props.setFavourite(key, this.props.bankList, false);\n        }\n        return null;\n      });\n    }\n    this.setState({ selectedRowKeys });\n  };\n\n\n  onFieldSearch = value => {\n    clearTimeout(this.state.timerId);\n    this.setState({\n      timerId: setTimeout(() => {\n        this.props.setSearchKey(value, this.props.bankList);\n      }, 1000)\n    });\n  };\n\n  displayData = () => {\n    if (this.props.isOnlyFavourites) {\n      if (this.props.searchKey.length > 0) {\n        return this.props.filteredData?.filter(data => data.isFavourite);\n      } else {\n        return this.props.bankList?.filter(data => data.isFavourite);\n      }\n    } else {\n      if (this.props.searchKey.length > 0) {\n        return this.props.filteredData;\n      } else {\n        return this.props.bankList;\n      }\n    }\n  };\n\n  render() {\n    const rowSelection = {\n      selectedRowKeys: this.props.favList,\n      hideDefaultSelections: \"true\",\n      onChange: this.onSelectChange\n    };\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n            <Select\n              bordered={false}\n              showSearch\n              style={{ width: 200 }}\n              placeholder=\"Select city\"\n              optionFilterProp=\"children\"\n              filterOption={(input, option) =>\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n            >\n              {this.props.cityList.map(data => (\n                <Option key={data} value={data}>\n                  {data}\n                </Option>\n              ))}\n            </Select>\n            <div style={{ width: \"25%\" }}>\n              <Input.Search onChange={(e) => this.onFieldSearch(e.target.value)} placeholder=\"Search for key words you remember\" size=\"small\" />\n            </div>\n          </div>\n        </div>\n        <BankTable\n          loading={this.props.loading}\n          tableData={this.displayData()}\n          rowSelection={rowSelection}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = statef => {\n  return {\n    isLoading: statef.apiData.isLoading,\n    favList: statef.apiData.favList,\n    bankList: statef.apiData.bankList,\n    cityList: statef.apiData.cityList,\n    searchKey: statef.apiData.searchKey,\n    filteredData: statef.apiData.filteredData\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchApiData: () => dispatch(fetchApiData()),\n  setFavourite: (id, bankList, type) =>\n    dispatch(setFavourite(id, bankList, type)),\n  setSearchKey: (searchKey, bankListData) =>\n    dispatch(setSearchKey(searchKey, bankListData))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostComponent);\n","import React from \"react\";\nimport { Row, Result, Button } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { SmileOutlined } from \"@ant-design/icons\";\nconst HomePage = props => {\n  return (\n    <Row justify={\"center\"}>\n      <Result\n        icon={<SmileOutlined />}\n        title=\"Great, we have landed to the home page!\"\n        extra={\n          <Link to=\"/banks\">\n            <Button type=\"primary\">Lets go to Bank-Lists</Button>\n          </Link>\n        }\n      />\n      ,\n    </Row>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./styles.css\";\nimport { Layout, Menu } from \"antd\";\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  HomeFilled,\n  BankFilled,\n  StarFilled\n} from \"@ant-design/icons\";\nimport BankDetailComponent from \"../Banking/BankDetailComponent\";\nimport Notfound from \"../StaticPages/NotFound\";\nimport { useHistory } from \"react-router\";\nimport { Switch, Route } from \"react-router-dom\";\nimport BankListComponent from \"../Banking/BankListComponent\";\nimport HomePage from \"../StaticPages/HomePage\";\nconst { Header, Sider, Content } = Layout;\n\nconst LayoutComponent = ({ path }) => {\n  const history = useHistory();\n  const [isCollapsed, setIsCollapsed] = React.useState(false);\n\n  const toggle = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  return (\n    <Layout>\n      <Sider trigger={null} collapsible collapsed={isCollapsed}>\n        <div className=\"logo\" />\n        <Menu\n          theme=\"dark\"\n          mode=\"inline\"\n          defaultSelectedKeys={[\"HOME\"]}\n          selectedKeys={[path]}\n        >\n          <Menu.Item key=\"HOME\" onClick={() => history.push(`/`)}>\n            <HomeFilled />\n            <span>HOME</span>\n          </Menu.Item>\n          <Menu.Item key=\"BANKS\" onClick={() => history.push(`/banks`)}>\n            <BankFilled />\n            <span>BANKS</span>\n          </Menu.Item>\n          <Menu.Item key=\"FAVOURITE\" onClick={() => history.push(`/favourite`)}>\n            <StarFilled />\n            <span>FAVOURITE</span>\n          </Menu.Item>\n        </Menu>\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n          <div className=\"header-wrapper\">\n            {React.createElement(\n              isCollapsed ? MenuUnfoldOutlined : MenuFoldOutlined,\n              {\n                className: \"trigger\",\n                onClick: toggle\n              }\n            )}\n            <div className=\"header-background\" />\n          </div>\n        </Header>\n        <Content\n          className=\"site-layout-background\"\n          style={{\n            margin: \"24px 16px\",\n            padding: 24\n          }}\n        >\n          <Switch>\n            <Route exact path={[\"/\", \"/home\"]}>\n              <HomePage />\n            </Route>\n            <Route exact path={[\"/favourite/:bankID\", \"/banks/:bankID\"]}>\n              <BankDetailComponent />\n            </Route>\n            <Route exact path={\"/banks\"}>\n              <BankListComponent />\n            </Route>\n            <Route exact path={\"/favourite\"}>\n              <BankListComponent isOnlyFavourites />\n            </Route>\n            <Route>\n              <Notfound />\n            </Route>\n          </Switch>\n\n          {/* <PostComponent/> */}\n        </Content>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default LayoutComponent;\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport LayoutComponent from '../Components/Layouts/LayoutComponent'\n\nconst PublicRoutes = () => (\n  <Switch>\n    <Route exact path={['/', '/home']}>\n      <LayoutComponent path={\"HOME\"} />\n    </Route>\n    <Route exact path={'/banks'}>\n      <LayoutComponent path={\"BANKS\"}/>\n    </Route>\n    <Route exact path={'/favourite'}>\n      <LayoutComponent path={\"FAVOURITE\"}/>\n    </Route>\n    <Route>\n      <LayoutComponent/>\n    </Route>\n  </Switch>\n)\n\nexport default PublicRoutes\n","const defaultState = {\n  isLoading: true,\n  bankList: [],\n  favList: [],\n  postsList: [],\n  postDataList: [],\n  searchKey: \"\",\n  filteredData: [],\n  cityList: []\n};\n\nconst FetchApiDataReducer = function(state = defaultState, action) {\n  const { type, payload } = action;\n\n  const updateState = update => {\n    return Object.assign({}, state, update);\n  };\n\n  const resetState = () => {\n    return Object.assign({}, state, defaultState);\n  };\n  switch (type) {\n    case \"IS_LOADING\":\n      return updateState({ isLoading: payload });\n    case \"SET_API_DATA\":\n      return updateState({ bankList: payload });\n    case \"SET_FAVOURITE_LIST\":\n      return updateState({ favList: payload });\n    case \"SET_POST_API_DATA\":\n      return updateState({ postDataList: payload });\n    case \"SET_CITY_LIST\":\n      return updateState({ cityList: payload });\n    case \"SET_FILTERED_LIST\":\n      return updateState({ filteredData: payload });\n    case \"SET_SEARCH_KEY\":\n      return updateState({ searchKey: payload });\n    case \"RESET_DATA\":\n      return resetState();\n    default:\n      return state;\n  }\n};\nexport default FetchApiDataReducer;\n","import { combineReducers } from \"redux\";\nimport FetchApiDataReducer from \"./FetchApiDataReducer.js\";\n\nconst rootReducer = combineReducers({\n  apiData: FetchApiDataReducer\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/rootReducer';\nimport axios from 'axios';\n\naxios.defaults.withCredentials = true;\nconst middleware = applyMiddleware(thunk.withExtraArgument(axios));\n\n\nconst store = createStore(rootReducer, composeWithDevTools(middleware));\n\nexport default store;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"antd/dist/antd.css\";\nimport PublicRoutes from \"./routes/PublicRoutes\";\nimport { Provider } from \"react-redux\";\nimport store from './stores/store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <PublicRoutes />\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}